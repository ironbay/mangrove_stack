type Query {
  pipe(id: ID!): Pipe!
}

type User {
  pipes: [Pipe!]!
}

type Pipe {
  id: ID!
  name: String!
  flags: Flags!
  sources: [Source!]!
  destinations: [Destination!]!
}

input CreatePipeInput {
  id: ID!
  name: String!
  flags: Flags!
  sources: [Source!]!
  destinations: [Destination!]!
}

type Mutation {
  createPipe(input: CreatePipeInput!): Pipe!
  removePipe(input: ID!): Pipe!
}

type Source {
  account: Account!
  filters: [Filter!]!
}

union Account = PlaidAccount | BitcoinAccount
union Filter = NumberFilter | StringFilter

union Destination = SlackDestination | TwilioDestination

type SlackDestination {
  id: ID!
  team: SlackTeam!
  channel: SlackChannel!
}

type TwilioDestination {
  id: ID!
  phone: String!
}

type NumberFilter {
  id: ID!
  kind: String!
  op: String!
  int: Int!
}

type StringFilter {
  id: ID!
  kind: String!
  op: String!
  word: String!
}

type Flags {
  enabled: Boolean!
}
